using Core;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

namespace FileManager
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private Explorer ex;
        private List<FileEntry> files;
        private List<FileEntry> selectedFiles;
        private bool isCopy;

        public MainWindow()
        {
            InitializeComponent();

            ex = new Explorer();

            var contextMenu = new ContextMenu();

            this.dataGrid.AutoGeneratedColumns += OnColumnsGenerated;

            this.selectedFiles = new List<FileEntry>();


        }

        private void OnColumnsGenerated(object sender, EventArgs e)
        {
            this.dataGrid.Columns[0].Visibility = Visibility.Hidden;
        }

        private async void Window_Loaded(object sender, RoutedEventArgs e)
        {
            this.navigationInput.Text = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);

            await this.GetFiles();
        }

        private async Task GetFiles()
        {
            files = await ex.GetFiles(this.navigationInput.Text);

            this.dataGrid.ItemsSource = files;
        }

        private async void backButton_Click(object sender, RoutedEventArgs e)
        {
            this.navigationInput.Text = this.ex.GetPrevious();
            await this.GetFiles();
        }

        private async void nextButton_Click(object sender, RoutedEventArgs e)
        {
            this.navigationInput.Text = this.ex.GetNext();
            await this.GetFiles();
        }

        private async void upButton_Click(object sender, RoutedEventArgs e)
        {
            this.navigationInput.Text = System.IO.Directory.GetParent(this.navigationInput.Text).FullName;

            await this.GetFiles();
        }

        private async void dataGrid_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (this.dataGrid.SelectedItem != null)
            {
                var selectedItem = this.dataGrid.SelectedItem as FileEntry;

                if (selectedItem.FileType == FileType.Directory)
                {
                    this.navigationInput.Text = selectedItem.FilePath;
                    await this.GetFiles();
                }
                else
                {
                    Process fileopener = new Process();
                    fileopener.StartInfo.FileName = "explorer";
                    fileopener.StartInfo.Arguments = "\"" + (this.dataGrid.SelectedItem as FileEntry).FilePath + "\"";
                    fileopener.Start();
                }
            }
        }

        private async void navigationInput_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                await this.GetFiles();
            }
        }

        private async void searchInput_KeyUp(object sender, KeyEventArgs e)
        {
            if (this.searchInput.Text.Length > 0)
            {
                this.dataGrid.ItemsSource = this.files.Where(r => r.Name.StartsWith(this.searchInput.Text, true, CultureInfo.InvariantCulture));
            }
            else
            {
                await this.GetFiles();
            }
        }

        private async void CustomContextMenu_OnMenuItemClick(object sender, EventArgs e)
        {
            var button = (Button)sender;

            var selectedItems = this.dataGrid.SelectedItems;


            switch (button.Content.ToString())
            {
                case "Open":
                    foreach (FileEntry file in selectedItems)
                    {
                        this.ex.Open(file.FilePath);
                    }

                    this.dataGridContextMenu.IsOpen = false;

                    break;
                case "Copy":
                    this.isCopy = true;
                    this.selectedFiles.Clear();

                    foreach (var item in selectedItems)
                    {
                        this.selectedFiles.Add((FileEntry)item);
                    }

                    this.dataGridContextMenu.IsOpen = false;
                    break;
                case "Paste":
                    if (this.isCopy)
                    {
                        for (int i = 0; i < selectedFiles.Count; i++)
                        {
                            await this.ex.Copy(selectedFiles[i].FilePath, System.IO.Path.Combine(navigationInput.Text, selectedFiles[i].Name));
                        }
                    }
                    else
                    {
                        for (int i = 0; i < selectedFiles.Count; i++)
                        {
                            await this.ex.Cut(selectedFiles[i].FilePath, System.IO.Path.Combine(navigationInput.Text, selectedFiles[i].Name));
                        }
                    }
                    this.dataGridContextMenu.IsOpen = false;

                    await this.GetFiles();

                    break;
                case "Cut":
                    this.isCopy = false;
                    this.selectedFiles.Clear();

                    foreach (var item in selectedItems)
                    {
                        this.selectedFiles.Add((FileEntry)item);
                    }

                    this.dataGridContextMenu.IsOpen = false;
                    break;
                case "Delete":

                    foreach (FileEntry fileEntry in dataGrid.SelectedItems)
                    {
                        var d = new Dialog(this);
                        d.Message = $"Delete {fileEntry.Name}?";

                        var confimationDialog = d.RenderDialog();

                        if (confimationDialog == DialogButtonType.Yes)
                        {
                            await this.ex.Delete(fileEntry.FilePath);
                        }
                    }

                    this.dataGridContextMenu.IsOpen = false;

                    await this.GetFiles();
                    break;
                case "Rename":
                    var selectedIdex = this.dataGrid.SelectedIndex;

                    this.dataGrid.SelectedCells[1].Column.IsReadOnly = false;

                    dataGrid.CurrentCell = new DataGridCellInfo(dataGrid.Items[selectedIdex], dataGrid.Columns[1]);
                    dataGrid.BeginEdit();
                    dataGrid.CellEditEnding += DataGrid_CellEditEnding;

                    this.dataGridContextMenu.IsOpen = false;
                    break;
                default:
                    break;
            }


        }

        private async void DataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            var textBox = e.EditingElement as TextBox;
            var selectedItem = (FileEntry)this.dataGrid.SelectedItem;
            if (textBox.Text != selectedItem.Name)
            {
                await this.ex.Rename(System.IO.Path.Combine(this.navigationInput.Text, textBox.Text), selectedItem.FilePath);

                await this.GetFiles();
            }
        }

        private async void refreshButton_Click(object sender, RoutedEventArgs e)
        {
            await this.GetFiles();
        }

        private void MinimizeWindowClick(object sender, RoutedEventArgs e)
        {
            App.Current.MainWindow.WindowState = WindowState.Minimized;
        }

        private void MaximizeButtonClick(object sender, RoutedEventArgs e)
        {
            if (App.Current.MainWindow.WindowState == WindowState.Maximized)
            {
                App.Current.MainWindow.WindowState = WindowState.Normal;
            }
            else if (App.Current.MainWindow.WindowState == WindowState.Normal)
            {
                App.Current.MainWindow.WindowState = WindowState.Maximized;
            }
        }

        private void CloseButtonClick(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void Window_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (e.LeftButton == MouseButtonState.Pressed)
            {
                App.Current.MainWindow.DragMove();
            }
        }

        private void Window_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (e.ClickCount == 2)
            {
                this.MaximizeButtonClick(sender, e);
            }
        }
    }
}
